% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ko_filter.R
\name{ko_filter}
\alias{ko_filter}
\title{Knockoff filter with generated knockoff variable set}
\usage{
ko_filter(X, Xk, y, q = 0.05, w.method = "lasso.lcd", offset = 0, ...)
}
\arguments{
\item{X}{A \eqn{n \times p} numeric matrix of predictors.}

\item{Xk}{A \eqn{n \times p} numeric matrix of knockoff predictors.}

\item{y}{A numeric or factor type repose vector of length \eqn{n}.}

\item{q}{A numeric value of the target false discovery rate (FDR) level.}

\item{w.method}{A character string specifying the method to compute feature importance statistics. Default is \code{"lasso.lcd"}. Other options include \code{"lasso.logistic"} for binary response variable, \code{"lasso.max.lambda"} for the maximum lambda value for the first entry on the path, and \code{"RF"} for random forest. See \code{\link{ko_filter}} or \code{\link{knockoff::knockoff.filter}} for more details.}

\item{offset}{A numeric or string value to adjust the knockoff threshold. Default is \eqn{0} (control modified FDR). Other options include \eqn{1} (yields a slightly more conservative procedure ("knockoffs+") that controls the FDR according to the usual definition) and \code{"both"} (returns results from both "knockoffs" and "knockoffs+").}

\item{...}{Additional arguments passed to the underlying methods. See functions `stat.lasso_coefdiff`, `stat.lasso_lambdadiff`, `stat.lasso_coefdiff_bin`, `stat.random_forest` in `knockoff` package for more details. More options will be provided in the future.}
}
\value{
An object of class "knockoff.result". This object is a list
 containing at least the following components:
\describe{
  \item{`call`}{The matched call.}
  \item{`statistic`}{The computed test statistics `W` of length \eqn{p}.}
  \item{`threshold`}{The knockoff threshold used to determine discoveries.}
  \item{`selected`}{The named vector of selected variables.}
}
}
\description{
Knockoff filter with generated knockoff variable set
}
\examples{
# Example usage of ko.filter
set.seed(123)
X <- matrix(rnorm(100*10), 100, 10)
Xk <- plsko(X) # generate knockoff variables by PLSKO

# Example 1: continuous response
# randomly assign zero or one as coefficients to the variables
beta <- sample(c(0, 1), 10, replace = TRUE)
y <- X \%*\% beta + rnorm(100)

# run the knockoff filter
result <- ko_filter(X, Xk, y, q = 0.1)
print(result)

# compare with the true coefficients
which(beta != 0)

# Example 2: knockoff+
result.plus <- ko_filter(X, Xk, y, q = 0.1, offset = 1)
print(result.plus) # return NULL since no variables are selected as a conservative procedure

# Example 3: binary response
y.bin <- rbinom(100, 1, 1/(1+ exp(-(X \%*\% beta)))) # convert to binary response
result.bin <- ko_filter(X, Xk, y.bin, q = 0.1,w.method = "lasso.logistic")
print(result.bin)

}
\references{
Candes et al., Panning for Gold: Model-free Knockoffs for High-dimensional Controlled Variable Selection,
  arXiv:1610.02351 (2016).
  \href{https://web.stanford.edu/group/candes/knockoffs/index.html}{https://web.stanford.edu/group/candes/knockoffs/index.html}

  Barber and Candes,
  Controlling the false discovery rate via knockoffs.
  Ann. Statist. 43 (2015), no. 5, 2055--2085.
}
