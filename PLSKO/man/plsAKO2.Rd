% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plsAKO2.R
\name{plsAKO2}
\alias{plsAKO2}
\title{Pipleline For Integration Multiple PLSKO with Aggregate Knockoffs (AKO) Procedure}
\usage{
plsAKO2(
  X,
  y,
  n_ko = 25,
  q = 0.05,
  offset = 0,
  w.method = "lasso.lcd",
  gamma = 0.3,
  parallel = T,
  ncores = NULL,
  seed = 1,
  ...
)
}
\arguments{
\item{X}{A numeric matrix or dataframe. The original predictor data matrix with \eqn{n} observations as rows and \eqn{p} variables as columns.}

\item{y}{A numeric vector of responses.}

\item{n_ko}{An integer specifying the number of knockoff copies to generate by PLSKO. Default is 25.}

\item{q}{A numeric value specifying the target false discovery rate (FDR). Default is 0.05.}

\item{offset}{An integer (0 or 1) specifying the offset in the empirical p-value calculation. Default is \eqn{0} (liberally control modified FDR with higher power). Other options include \eqn{1}, similar to "knockoffs+", yielding a slightly more conservative procedure that controls the FDR according to the usual definition.}

\item{w.method}{A character string specifying the method to compute feature importance statistics. Default is \code{"lasso.lcd"}. Other options include \code{"lasso.logistic"} for binary response variable, \code{"lasso.max.lambda"} for the maximum lambda value for the first entry on the path, and \code{"RF"} for random forest. See \code{\link{ko_filter}} or \code{\link{knockoff::knockoff.filter}} for more details.}

\item{gamma}{A numeric value between 0 and 1 for the quantile aggregation parameter. Default is 0.3.}

\item{parallel}{Logical value indicating whether to run the process in parallel. Default is \code{TRUE}.}

\item{ncores}{An integer specifying the number of cores to use for parallel processing. Default is NULL, which uses all available cores except one.}

\item{seed}{An integer to set the random seed for reproducibility. Default is 1.}

\item{...}{Additional arguments passed to the \link[=plsko]{plsko} knockoff-generating function.}
}
\value{
A list of class 'AKO.result', containing:
\describe{
  \item{`s`}{A list of results from individual knockoff filters.}
  \item{`ako.s`}{The named vector of selected variables after aggregating knockoff results.}
  \item{`threshold`}{The FDR control threshold from AKO.}
}
}
\description{
This function implements the Aggregate Knockoffs (AKO) procedure from Nguyen et al. (2020)  with knockoff variables generated by PLSKO, to address the randomness from single-run knockoffs and improve the stablity. It generates multiple knockoff copies from PLSKO, computes feature importance statistics, aggregates p-values across knockoff realisations to control the false discovery rate. Compared to single-run knockoffs, AKO improved the average power with FDR control. The function is adapted from Tian et al. (2022).
}
\examples{

# Example usage of ko.filter
set.seed(1)
X <- matrix(rnorm(100*10), 100, 10)
colnames(X) <- paste0("X", 1:10)

# Example 1: continuous response without parallelisation
# randomly assign zero or one as coefficients to the variables
beta <- sample(c(0, 1), 10, replace = TRUE)
y <- X \%*\% beta + rnorm(100)

# run the knockoff filter
start.time <- Sys.time()
result <- plsAKO2(X, y, q = 0.1, n_ko = 15, parallel = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(result)
time.taken

# check the frequency of selected variables from iterations of single-run knockoffs
table(unlist(lapply(result$s, function(x) x$selected)))

# compare with the true coefficients
which(beta != 0)

# Example 2: continuous response with parallelisation

start.time <- Sys.time()
result <- plsAKO2(X, y, q = 0.1, n_ko = 15, parallel = T, ncores = 4)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(result)
time.taken

# check the frequency of selected variables from iterations of single-run knockoffs
table(unlist(lapply(result$s, function(x) x$selected)))

# compare with the true coefficients
which(beta != 0)

# Example 3: binary response
y.bin <- rbinom(100, 1, 1/(1+ exp(-(X \%*\% beta)))) # convert to binary response
result.bin <- plsAKO(X, y.bin, n_ko = 15, q = 0.1, w.method = "lasso.logistic", parallel = T, ncores = 4)
print(result.bin)

# check the frequency of selected variables from iterations of single-run knockoffs
table(unlist(lapply(result.bin$s, function(x) x$selected)))

}
\references{
Yang G et al. PLSKO: a robust knockoff generator to control false discovery rate in omics variable selection. 2024:2024.08.06.606935.

Nguyen T-B et al. Aggregation of Multiple Knockoffs. Proceedings of the 37th International Conference on Machine Learning. PMLR, 2020, 7283â€“93.

Tian P et al. Grace-AKO: a novel and stable knockoff filter for variable selection incorporating gene network structures. BMC Bioinformatics 2022;23:478.
}
